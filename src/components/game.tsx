import Head from "next/head";
import { useEffect, useState, useMemo } from "react";
import { Socket, io } from "socket.io-client";
import Board from "../components/board";
import { ClientToServerEvents, ServerToClientEvents } from "../types/ws-types";
import { useRouter } from "next/router";
import { trpc } from "../utils/trpc";
import useStore from "../store/useStore";
import usePlayerId from "../utils/usePlayerId";

const Game = () => {
  const [connected, setConnected] = useState<boolean>(false);
  const router = useRouter();
  const socket: Socket<ServerToClientEvents, ClientToServerEvents> = useMemo(
    () => io(`/${router.query.gameId}`),
    [router.query.gameId]
  );

  const currentTurn = useStore((state) => state.currentTurn);
  const playerType = useStore((state) => state.playerType);
  const moveType = useStore((state) => state.moveType);
  const clearGameData = useStore((state) => state.clearGameData);
  const setGameData = useStore((state) => state.setGameData);

  router.beforePopState(() => {
    clearGameData();
    return true;
  });

  const playerId = usePlayerId();

  trpc.useQuery(
    [
      "game.join",
      playerId
        ? { playerId, gameId: router.query.gameId as string }
        : undefined,
    ],
    {
      onSuccess: setGameData,
    }
  );

  useEffect(() => {
    socket.on("connect", () => setConnected(true));
    socket.on("disconnect", () => setConnected(false));
    return () => {
      socket.off("connect");
      socket.off("disconnect");
    };
  }, [socket]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-screen bg-black">
        {connected && playerType && currentTurn ? (
          <div className="flex h-full w-full flex-col justify-center align-middle">
            <div className="flex-grow-0 text-white">{`playerType: ${playerType}, currentTurn: ${currentTurn}, moveType: ${moveType}`}</div>
            <div className="m-auto grid w-full max-w-5xl flex-auto grid-cols-2 p-10">
              <Board boardIndex={playerType === "white" ? 3 : 0} />
              <Board boardIndex={playerType === "white" ? 2 : 1} />
              <hr className="col-span-2 m-auto h-1 w-4/5" />
              <Board boardIndex={playerType === "white" ? 1 : 2} />
              <Board boardIndex={playerType === "white" ? 0 : 3} />
            </div>
          </div>
        ) : (
          <div className="flex h-full w-full">
            <div className="m-auto text-lg text-white">Loading...</div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Game;
