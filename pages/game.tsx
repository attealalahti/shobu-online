import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { Socket, io } from "socket.io-client";
import Board from "../components/board";
import { AllBoards, BoardState, GameState, IntRange, Player } from "../types/game-types";
import { ClientToServerEvents, ServerToClientEvents } from "../types/ws-types";

const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io("/1");

const Game: NextPage = () => {
  const [player, setPlayer] = useState<Player | undefined>(undefined);
  const [allBoards, setAllBoards] = useState<AllBoards | undefined>(undefined);
  const [currentTurn, setCurrentTurn] = useState<Player>("spectator");

  useEffect(() => {
    const joinCallback = (player: Player, game: GameState) => {
      setPlayer(player);
      setCurrentTurn(game.currentTurn);
      setAllBoards(game.boards);
    };
    socket.on("connect", () => {
      socket.emit("join", joinCallback);
    });
    socket.on("disconnect", () => setPlayer(undefined));
    socket.emit("join", joinCallback);
    return () => {
      socket.off("connect");
      socket.off("disconnect");
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const updateBoard = (boardIndex: IntRange, newBoard: BoardState) => {
    if (allBoards) {
      const newAllBoards: AllBoards = [...allBoards];
      newAllBoards[boardIndex] = newBoard;
      setAllBoards(newAllBoards);
    }
  };

  const endTurn = () => {
    if (player === "black") {
      setCurrentTurn("white");
    } else if (player === "white") {
      setCurrentTurn("black");
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-black w-screen h-screen">
        {player && allBoards ? (
          <div className="w-full h-full flex justify-center align-middle flex-col">
            <div className="flex-grow-0 text-white">{player}</div>
            <div className="grid flex-auto grid-cols-2 p-10 w-full max-w-5xl m-auto">
              <Board
                color="dark"
                player={player}
                currentTurn={currentTurn}
                updateBoard={updateBoard}
                endTurn={endTurn}
                board={allBoards[0]}
                boardIndex={0}
              />
              <Board
                color="light"
                player={player}
                currentTurn={currentTurn}
                updateBoard={updateBoard}
                endTurn={endTurn}
                board={allBoards[1]}
                boardIndex={1}
              />
              <hr className="col-span-2 m-auto h-1 w-4/5" />
              <Board
                color="dark"
                player={player}
                currentTurn={currentTurn}
                updateBoard={updateBoard}
                endTurn={endTurn}
                board={allBoards[2]}
                boardIndex={2}
              />
              <Board
                color="light"
                player={player}
                currentTurn={currentTurn}
                updateBoard={updateBoard}
                endTurn={endTurn}
                board={allBoards[3]}
                boardIndex={3}
              />
            </div>
          </div>
        ) : (
          <div className="w-full h-full flex">
            <div className="m-auto text-lg text-white">Loading...</div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Game;
